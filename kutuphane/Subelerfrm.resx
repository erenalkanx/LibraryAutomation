<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAOwAAAKIAAACiAAAAOwAAAAAAAAAAAAAAAAAAAAAAAAA7AAAAogAAAKIAAAA7AAAAAAAA
        AAAAAAAAAAAAAAAAADsAAACiAAAAogAAADsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAABdAAAA/wAAAP8AAABdAAAAAAAAAAAAAAAAAAAAAAAAAF0AAAD/AAAA/wAA
        AF0AAAAAAAAAAAAAAAAAAAAAAAAAXQAAAP8AAAD/AAAAXQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF0AAAD/AAAA/wAAAF0AAAAAAAAAAAAAAAAAAAAAAAAAXQAA
        AP8AAAD/AAAAXQAAAAAAAAAAAAAAAAAAAAAAAABdAAAA/wAAAP8AAABdAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAXgAAAP8AAAD/AAAAXgAAAAAAAAABAAAAAQAA
        AAAAAABeAAAA/wAAAP8AAABeAAAAAAAAAAEAAAABAAAAAAAAAF4AAAD/AAAA/wAAAF4AAAAAAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAAAjAAAAKMAAADEAAAA/wAAAP8AAADEAAAAnwAA
        AKIAAACiAAAAnwAAAMQAAAD/AAAA/wAAAMQAAACfAAAAogAAAKIAAACfAAAAxAAAAP8AAAD/AAAAxAAA
        AKMAAACMAAAAFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIAAADdAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAN0AAAAiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAAAL8AAADiAAAA6QAA
        AP8AAAD/AAAA6QAAANwAAADdAAAA3QAAANwAAADpAAAA/wAAAP8AAADpAAAA3AAAAN0AAADdAAAA3AAA
        AOkAAAD/AAAA/wAAAOkAAADiAAAAvwAAAB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAHQAA
        ABsAAABzAAAA/wAAAP8AAABzAAAAGgAAACIAAAAiAAAAGgAAAHMAAAD/AAAA/wAAAHMAAAAaAAAAIgAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADwAAACTAAAA2QAAANkAAACTAAAAPAAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC4AAAB6AAAAegAAAC4AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAABIAAAASAAAABwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////////////5+fn/8PDw//Dw8P/w8PD/0JCQv4AAAB+AA
        AAfgAAAH4AAAB/w8PD/8PDw/wDw8A8A8PAPAPDwD4Bw4B/gEIB/4BCAf/AAAP/4AAH//gAH//8AD///g
        B///8A////w////8P/////////////////8=
</value>
  </data>
</root>