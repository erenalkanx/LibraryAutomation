<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAMAAAAGwAAACEAAAAiAAAAIgAA
        ACIAAAAiAAAAIgAAACIAAAAiAAAAIgAAACIAAAAiAAAAIgAAACIAAAAiAAAAIgAAACIAAAAiAAAAIgAA
        ACIAAAAiAAAAIgAAACEAAAAbAAAADAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAFEAAACzAAAA2AAA
        AN4AAADdAAAA3QAAAN0AAADdAAAA3QAAAN0AAADdAAAA3QAAAN0AAADdAAAA3QAAAN0AAADdAAAA3QAA
        AN0AAADdAAAA3QAAAN0AAADeAAAA2AAAALMAAABRAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAA8AAAAtQAA
        APEAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA8QAAALUAAAA8AAAAAAAAAAAAAAAAAAAAAAAA
        AFgAAADzAAAA/gAAAMQAAACfAAAAogAAAKIAAACiAAAAogAAAKEAAACeAAAAnwAAAKIAAACiAAAAogAA
        AKIAAACiAAAAogAAAKIAAACiAAAAogAAAKIAAACiAAAAnwAAAMQAAAD+AAAA8wAAAFgAAAAAAAAAAAAA
        AAAAAAAAAAAAXQAAAP8AAAD/AAAAXgAAAAAAAAABAAAAAQAAAAEAAAAAAAAABAAAABUAAAALAAAAAgAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAAAAAAXgAAAP8AAAD/AAAAXQAA
        AAAAAAAAAAAAAAAAAAAAAABdAAAA/wAAAP8AAABdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAfgAA
        AEUAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABdAAAA/wAA
        AP8AAABdAAAAAAAAAAAAAAAAAAAAAAAAAF0AAAD/AAAA/wAAAF0AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AB8AAADFAAAAwAAAAHMAAAApAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AF0AAAD/AAAA/wAAAF0AAAAAAAAAAAAAAAAAAAAAAAAAXQAAAP8AAAD/AAAAXQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAIgAAAN0AAAD/AAAA1wAAAIsAAABHAAAAFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAXQAAAP8AAAD/AAAAXQAAAAAAAAAAAAAAAAAAAAAAAABdAAAA/wAAAP8AAABdAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAiAAAA3QAAAP8AAAD/AAAA9QAAAL4AAABhAAAAHwAAAAoAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAABdAAAA/wAAAP8AAABdAAAAAAAAAAAAAAAAAAAAAAAAAF0AAAD/AAAA/wAA
        AF0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIAAADdAAAA/wAAAP8AAAD+AAAA9QAAAOAAAACeAAAAQQAA
        AAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF0AAAD/AAAA/wAAAF0AAAAAAAAAAAAAAAAAAAAAAAAAXQAA
        AP8AAAD/AAAAXQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIgAAAN0AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AOoAAAC4AAAAeAAAAC4AAAAFAAAAAAAAAAAAAAAAAAAAXQAAAP8AAAD/AAAAXQAAAAAAAAAAAAAAAAAA
        AAAAAABdAAAA/wAAAP8AAABdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiAAAA3QAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAPQAAACyAAAASQAAAAgAAAAAAAAAAAAAAAAAAABdAAAA/wAAAP8AAABdAAAAAAAA
        AAAAAAAAAAAAAAAAAF0AAAD/AAAA/wAAAF0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIAAADdAAAA/wAA
        AP8AAAD/AAAA/wAAAPgAAADrAAAAzAAAAIIAAAAyAAAABgAAAAAAAAAAAAAAAAAAAF0AAAD/AAAA/wAA
        AF0AAAAAAAAAAAAAAAAAAAAAAAAAXQAAAP8AAAD/AAAAXQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIgAA
        AN0AAAD/AAAA/wAAAP8AAAD6AAAAyQAAAHsAAAAzAAAAFgAAAAcAAAABAAAAAAAAAAAAAAAAAAAAXQAA
        AP8AAAD/AAAAXQAAAAAAAAAAAAAAAAAAAAAAAABdAAAA/wAAAP8AAABdAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAiAAAA3QAAAP8AAADvAAAAwwAAAIAAAABMAAAAIQAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABdAAAA/wAAAP8AAABdAAAAAAAAAAAAAAAAAAAAAAAAAF0AAAD/AAAA/wAAAF0AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAACAAAADLAAAA0gAAAJoAAABdAAAAHAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAF0AAAD/AAAA/wAAAF0AAAAAAAAAAAAAAAAAAAAAAAAAXQAAAP8AAAD/AAAAXQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAFgAAAIsAAABdAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAXQAAAP8AAAD/AAAAXQAAAAAAAAAAAAAAAAAAAAAAAABdAAAA/wAA
        AP8AAABeAAAAAAAAAAEAAAABAAAAAQAAAAAAAAAEAAAAFwAAAA8AAAAEAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAAAAABeAAAA/wAAAP8AAABdAAAAAAAAAAAAAAAAAAAAAAAA
        AF0AAAD+AAAA/wAAAMQAAACfAAAAogAAAKIAAACiAAAAogAAAKEAAACeAAAAnwAAAKEAAACiAAAAogAA
        AKIAAACiAAAAogAAAKIAAACiAAAAogAAAKIAAACiAAAAnwAAAMQAAAD/AAAA/gAAAF0AAAAAAAAAAAAA
        AAAAAAAAAAAAXQAAAP4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD+AAAAXQAA
        AAAAAAAAAAAAAAAAAAAAAABRAAAA3AAAAN4AAADdAAAA3QAAAN0AAADdAAAA3AAAAOkAAAD/AAAA/wAA
        AOkAAADcAAAA3QAAAN0AAADcAAAA6QAAAP8AAAD/AAAA6QAAANwAAADdAAAA3QAAAN0AAADdAAAA3gAA
        ANwAAABRAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAiAAAAIgAAACIAAAAiAAAAIgAAACIAAAAaAAAAcwAA
        AP8AAAD/AAAAcwAAABoAAAAiAAAAIgAAABoAAABzAAAA/wAAAP8AAABzAAAAGgAAACIAAAAiAAAAIgAA
        ACIAAAAiAAAAIgAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABdAAAA/wAAAP8AAABdAAAAAAAAAAAAAAAAAAAAAAAAAF0AAAD/AAAA/wAAAF0AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAFsAAAD4AAAA/gAAAJgAAABXAAAAXQAAAF0AAABXAAAAmAAAAP4AAAD4AAAAWwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAASgAAANMAAAD3AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA9wAA
        ANMAAABKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAAAAbwAAANQAAAD5AAAA/wAAAP8AAAD/AAAA/wAA
        APkAAADUAAAAbwAAAB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAfAAAASgAAAFsAAABdAAAAXQAA
        AF0AAABdAAAAWwAAAEoAAAAfAAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////wAAAA8AAAAPAAAADwAAAA8IgAEPD4f/Dw+B/w8Pg
        P8PD4AfDw+AHw8PgAcPD4AHDw+ABw8PgAcPD4A/Dw+A/w8Ph/8PCIABDwAAAA8AAAAPAAAADwAAAA//D
        w///wAP//8AD///AA///wAP///////////8=
</value>
  </data>
</root>