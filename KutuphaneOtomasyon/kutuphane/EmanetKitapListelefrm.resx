<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAHgAAAEoAAABbAAAAXQAAAF0AAABdAAAAXQAA
        AF0AAABdAAAAXQAAAF0AAABdAAAAXQAAAF0AAABdAAAAXQAAAF0AAABdAAAAXQAAAF8AAABQAAAADQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAABuAAAA1AAAAPkAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AN0AAAAiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASgAAANMAAAD3AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA3QAAACIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABbAAAA+AAA
        AP4AAACYAAAAVwAAAF0AAABdAAAAXQAAAF0AAABdAAAAXQAAAF0AAABdAAAAXQAAAF0AAABdAAAAXQAA
        AF0AAABdAAAAXQAAAF8AAABQAAAADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AF0AAAD/AAAA/wAAAF0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAXQAAAP8AAAD/AAAAXQAAAAAAAAABAAAACAAAABYAAAAgAAAAIgAAACIAAAAiAAAAIgAA
        ACIAAAAiAAAAIgAAACIAAAAiAAAAIgAAACIAAAAiAAAAIgAAACIAAAAiAAAAIQAAABsAAAAMAAAAAwAA
        AAAAAAAAAAAAAAAAAAAAAABdAAAA/wAAAP8AAABdAAAAAAAAAAgAAAA3AAAAlQAAANMAAADdAAAA3QAA
        AN0AAADdAAAA3QAAAN0AAADdAAAA3QAAAN0AAADdAAAA3QAAAN0AAADdAAAA3QAAAN4AAADYAAAAswAA
        AFEAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAF0AAAD/AAAA/wAAAF0AAAAAAAAAFwAAAJQAAADiAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAADxAAAAtAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAXQAAAP8AAAD/AAAAXQAAAAAAAAAhAAAA0QAA
        AP8AAADdAAAAogAAAKIAAACiAAAAogAAAKIAAACiAAAAogAAAKIAAACiAAAAogAAAKIAAACiAAAAogAA
        AKIAAACfAAAAxAAAAP4AAADzAAAAWAAAAAAAAAAAAAAAAAAAAAAAAABdAAAA/wAAAP8AAABdAAAAAAAA
        ACIAAADdAAAA/wAAAKIAAAACAAAAAAAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAAAAABeAAAA/wAAAP8AAABdAAAAAAAAAAAAAAAAAAAAAAAAAF0AAAD/AAAA/wAA
        AF0AAAAAAAAAIgAAAN0AAAD/AAAAogAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF0AAAD/AAAA/wAAAF0AAAAAAAAAAAAAAAAAAAAAAAAAXQAA
        AP8AAAD/AAAAXQAAAAAAAAAiAAAA3QAAAP8AAACiAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXQAAAP8AAAD/AAAAXQAAAAAAAAAAAAAAAAAA
        AAAAAABdAAAA/wAAAP8AAABdAAAAAAAAACIAAADdAAAA/wAAAKIAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAlAAAAJQAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAMAAAAA0AAABbAAAA/wAAAP8AAABdAAAAAAAA
        AAAAAAAAAAAAAAAAAF0AAAD/AAAA/wAAAF0AAAAAAAAAIgAAAN0AAAD/AAAAogAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAHEAAACBAAAAIQAAAAkAAAADAAAADQAAADgAAACYAAAAOQAAAFcAAAD/AAAA/wAA
        AF0AAAAAAAAAAAAAAAAAAAAAAAAAXQAAAP8AAAD/AAAAXQAAAAAAAAAiAAAA3QAAAP8AAACiAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAABAAAAnAAAAOoAAAClAAAAOQAAABwAAABaAAAAwQAAAOsAAABRAAAAVQAA
        AP8AAAD/AAAAXQAAAAAAAAAAAAAAAAAAAAAAAABdAAAA/wAAAP8AAABdAAAAAAAAACIAAADdAAAA/wAA
        AKIAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAACiAAAA/wAAAOsAAAC1AAAApgAAAMYAAAD3AAAA/QAA
        AFUAAABUAAAA/wAAAP8AAABdAAAAAAAAAAAAAAAAAAAAAAAAAF0AAAD/AAAA/wAAAF0AAAAAAAAAIgAA
        AN0AAAD/AAAAogAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAKIAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD+AAAAVAAAAFQAAAD/AAAA/wAAAF0AAAAAAAAAAAAAAAAAAAAAAAAAXQAAAP8AAAD/AAAAXQAA
        AAAAAAAiAAAA3QAAAP8AAACiAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAogAAAP8AAAD8AAAA7QAA
        AOkAAADyAAAA/wAAAP4AAABUAAAAVAAAAP8AAAD/AAAAXQAAAAAAAAAAAAAAAAAAAAAAAABdAAAA/wAA
        AP8AAABdAAAAAAAAACIAAADdAAAA/wAAAKIAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAACiAAAA/wAA
        AOwAAACHAAAAawAAAKcAAAD/AAAA/gAAAFQAAABUAAAA/wAAAP8AAABdAAAAAAAAAAAAAAAAAAAAAAAA
        AF0AAAD/AAAA/wAAAF0AAAAAAAAAIgAAAN0AAAD/AAAAogAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
        AKIAAAD/AAAA4QAAAD0AAAARAAAAcQAAAP8AAAD/AAAAVAAAAFQAAAD/AAAA/wAAAF0AAAAAAAAAAAAA
        AAAAAAAAAAAAXQAAAP8AAAD/AAAAXQAAAAAAAAAiAAAA3QAAAP8AAACiAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAAogAAAP8AAADdAAAAIgAAAAAAAABdAAAA/wAAAP8AAABUAAAAVAAAAP8AAAD/AAAAXQAA
        AAAAAAAAAAAAAAAAAAAAAABRAAAA3QAAAN0AAABRAAAAAAAAACIAAADdAAAA/wAAAKIAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAEAAACiAAAA/wAAAN0AAAAiAAAAAAAAAF0AAAD/AAAA/wAAAFQAAABUAAAA/wAA
        AP8AAABdAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAiAAAAIgAAAAwAAAAAAAAAIgAAAN0AAAD/AAAAogAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAKIAAAD/AAAA3QAAACIAAAAAAAAAXQAAAP8AAAD/AAAAVAAA
        AFQAAAD/AAAA/wAAAF0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiAAAA3QAA
        AP8AAACiAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAogAAAP8AAADdAAAAIgAAAAAAAABdAAAA/wAA
        AP8AAABUAAAAVAAAAP8AAAD/AAAAXQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ACEAAADXAAAA/wAAAMQAAABeAAAAXAAAAF0AAABdAAAAXAAAAF4AAADEAAAA/wAAAOkAAABzAAAAUwAA
        AJgAAAD/AAAA/wAAAJMAAACTAAAA/gAAAPgAAABbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAHAAAALIAAADwAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD3AAAA0wAAAEoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAMAAAAUAAAALUAAAD0AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/gAA
        AP4AAAD+AAAA/wAAAP8AAAD/AAAA/gAAAP4AAAD/AAAA+gAAANQAAABuAAAAHgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAATAAAAPAAAAFgAAABdAAAAXQAAAF0AAABdAAAAXQAA
        AF0AAABdAAAAXQAAAF0AAABdAAAAXQAAAF0AAABdAAAAXQAAAF0AAABbAAAASgAAAB4AAAAGAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////AAAB/wAAAf8AAAH/AAAB/w////8IAAAPCAAADwgAAA8IA
        AAPCCABDwg//w8IP/8PCD54Dwg8AA8IPAAPCDwADwg8AA8IPAAPCDwADwg8AA8IPBAPCDwQDwg8EA/4P
        BAP+AAAD/gAAA/4AAAP+AAAD//////////8=
</value>
  </data>
</root>